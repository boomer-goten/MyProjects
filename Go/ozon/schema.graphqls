type Auth {
    token: String!
    UserID: ID!
}

type User {
    id: ID!
    name: String!
    password: String!
}

type Post {
    id: ID!
    author: User!
    title: String!
    content: String!
    allowComments: Boolean!
    comments: [Comment!]
    subscribers: [ID!]
}

type Comment {
    id: ID!
    postID: ID!
    parentCommentID: ID
    author: User!
    text: String!
    depth: Int!
    childComments: [Comment!]
}

type PageInfo {
    startCursor: ID!
    endCursor: ID!
    hasNextPage: Boolean!
}

type CommentsEdge {
    node: Comment
    cursor: ID!
}

type CommentsConnection {
    totalCount: Int!
    edges: [CommentsEdge!]
    pageInfo: PageInfo!
}

input NewPost {
    title: String!
    content: String!
    allowComments: Boolean = true
}

input NewComment {
    postID: ID!
    parentCommentID: ID = 0
    text: String!
}

input ChangeAccessComments {
    postID: ID!
    allowComments: Boolean!
}

input CommentPost {
    postID: ID!
    depth: Int = -1
}

input CommentFrom {
    postID: ID!
    depth: Int = -1
    parentCommentID: ID
}

input LoginRegister {
    name: String!
    password: String!
}

type Query {
    comments(input: CommentFrom, limit: Int, offset: Int): CommentsConnection!
    posts: [Post!]!
    post(input: CommentPost): Post
}

type Mutation {
    register(input: LoginRegister!): String!
    login(input: LoginRegister!): Auth!
    createPost(input: NewPost!): Post!
    createComment(input: NewComment): Comment
    accessComments(input: ChangeAccessComments): Post!
}

type Subscription {
    newComment(postID: ID!): Comment!
}