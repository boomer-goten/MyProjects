package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	graph "graphQL-fakereddit-service/internal/graph/gen"
	"graphQL-fakereddit-service/internal/graph/models/input"
	"graphQL-fakereddit-service/internal/graph/models/types"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input input.LoginRegister) (*types.RegistrResponse, error) {
	if err := input.Validate(); err != nil {
		return nil, err
	}
	return r.Storage.Register(input)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input input.LoginRegister) (*types.AuthResponse, error) {
	if err := input.Validate(); err != nil {
		return nil, err
	}
	ID, err := r.Storage.Login(input)
	if err != nil {
		return nil, err
	}
	token, err := r.Auth.CreateToken(ID, input.Name)
	if err != nil {
		return nil, err
	}
	return &types.AuthResponse{Token: token, UserID: ID}, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input input.NewPost) (*types.Post, error) {
	if err := input.Validate(); err != nil {
		return nil, err
	}
	ID, name, err := r.Auth.CheckUserID(ctx)
	if err != nil {
		return nil, err
	}
	return r.Storage.CreatePost(input, ID, name)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input *input.NewComment) (*types.Comment, error) {
	if err := input.Validate(); err != nil {
		return nil, err
	}
	ID, name, err := r.Auth.CheckUserID(ctx)
	if err != nil {
		return nil, err
	}
	return r.Storage.CreateComment(*input, ID, name)
}

// AccessComments is the resolver for the accessComments field.
func (r *mutationResolver) AccessComments(ctx context.Context, input *input.ChangeAccessComments) (*types.Post, error) {
	if err := input.Validate(); err != nil {
		return nil, err
	}
	ID, name, err := r.Auth.CheckUserID(ctx)
	if err != nil {
		return nil, err
	}
	return r.Storage.AccessComments(*input, ID, name)
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*types.Post, error) {
	return r.Storage.GetPosts()
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, input *input.CommentPost, limit *int, offset *int) (*types.CommentsConnection, error) {
	if err := input.Validate(); err != nil {
		return nil, err
	}
	return r.Storage.GetPost(input, limit, offset)
}

// NewComment is the resolver for the newComment field.
func (r *subscriptionResolver) NewComment(ctx context.Context, postID string) (<-chan *types.Comment, error) {
	panic(fmt.Errorf("not implemented: NewComment - newComment"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// Subscription returns graph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
