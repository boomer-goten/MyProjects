// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
)

// BuyCandyURL генерирует URL-адрес для операции покупки конфет
type BuyCandyURL struct {
	_basePath string
}

// WithBasePath устанавливает базовый путь для этого строителя URL-адресов, который требуется только в том случае, если он отличается от
// базовый путь, указанный в спецификации swagger.
// Когда значение базового пути представляет собой пустую строку
func (o *BuyCandyURL) WithBasePath(bp string) *BuyCandyURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath устанавливает базовый путь для этого строителя URL-адресов, требуется только в том случае, если он отличается от
// базовый путь, указанный в спецификации swagger.
// Когда значение базового пути представляет собой пустую строку
func (o *BuyCandyURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Создает URL-адрес и строку запроса.
func (o *BuyCandyURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/buy_candy"

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	return &_result, nil
}

// Must — вспомогательная функция для паники, когда строитель URL возвращает ошибку.
func (o *BuyCandyURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *BuyCandyURL) String() string {
	return o.Must(o.Build()).String()
}

// String возвращает строковое представление пути со строкой запроса.
func (o *BuyCandyURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on BuyCandyURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on BuyCandyURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull возвращает строковое представление полного URL-адреса.
func (o *BuyCandyURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
